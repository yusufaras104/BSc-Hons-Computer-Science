# -*- coding: utf-8 -*-
"""Y1-CYS22101-Software-Design-and-Development-22-23.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1iy6TP4iuNifLi53aOto7jXs5XyAgkxbZ

Task 1 - Write a python code to print an American flag on the screen.
"""

'''
Write a python code to print an American flag on the screen.
Expected Output:

* * * * * * * ====================================
 * * * * * * *====================================
* * * * * * * ====================================
 * * * * * * *====================================
* * * * * * * ====================================
 * * * * * * *====================================
==================================================
==================================================
==================================================
==================================================
'''
"""
# The following lines print the pattern of stars and equal signs to represent the American flag
print("* * * * * * * ====================================")
print(" * * * * * * *====================================")
print("* * * * * * * ====================================")
print(" * * * * * * *====================================")
print("* * * * * * * ====================================")
print(" * * * * * * *====================================")
print("==================================================")
print("==================================================")
print("==================================================")
print("==================================================")
"""

def printUSAFlag(height, width):
    s = ""

    # Iterate over each row and column to construct the flag pattern
    for i in range(height):
        for j in range(width):
            if i < 9*height/15 and j < 12*width/46:
                # Check the position to determine whether to print '*' or ' '
                if (i+j)%2 == 0 and j != 12*width/46 - 1:
                    s += '*'  # Add '*' to the pattern
                else:
                    s += " "  # Add empty space to the pattern
            else:
                s += '='  # Add '=' to the pattern for the remaining area

            if j == width - 1:
                s += '\n'  # Add a newline character at the end of each row
            else:
                s += ''  # Add an empty character for formatting purposes

    print(s)  # Print the final pattern

'''
width = int(input("Width: "))
height = int(input("Height: "))
'''

# Call the function to print the American flag with given dimensions
printUSAFlag(10, 50)

"""# Documentation

This brief explanation provides an overview of the Python code that prints an American flag on the screen using ASCII characters.

# Usage
To use the program, follow these steps:

Run the program in a Python environment.
The program will print an ASCII representation of the American flag on the screen.
# Code Description
The program consists of a single function:

`print_american_flag():` This function prints an ASCII representation of the American flag on the screen.

It follows a simplified structure and uses alternating rows of asterisks (*) and spaces to create the flag pattern.

The top part of the flag has 9 rows, the middle part has 6 rows.

Task 2 -

 Write a python program to compute body mass index (BMI). The program should take input values such as weight and height in order to calculate BMI and display it on the screen. In addition, the program should display to the user whether the calculated BMI result corresponds to underweight, healthy weight or overweight.
Formula: weight (kg) / [height (m)]2
"""

# Task 2: Computing Body Mass Index (BMI)

"""
Write a python program to compute body mass index (BMI). The program should take input values such as weight and height in order to calculate BMI and display it on the screen. In addition, the program should display to the user whether the calculated BMI result corresponds to underweight, healthy weight, or overweight.
Formula: weight (kg) / [height (m)]^2
"""

# Prompt the user to input height and weight
height = float(input("Enter your height in cm: "))
weight = float(input("Enter your weight in kg: "))

# Calculate BMI using the provided formula
BMI = weight / (height/100)**2

# Check the calculated BMI and provide corresponding output based on the value
if BMI <= 18.4:
    print("You are underweight.")
elif BMI <= 24.9:
    print("You are healthy.")
elif BMI <= 29.9:
    print("You are overweight.")
elif BMI <= 34.9:
    print("You are severely overweight.")
elif BMI <= 39.9:
    print("You are obese.")
else:
    print("You are severely obese.")

"""# Body Mass Index (BMI) Calculator
This section provides a brief overview of the program that computes the Body Mass Index (BMI) based on user input for weight and height.

It displays the calculated BMI value on the screen along with the corresponding weight category.

# Usage
To use the program

Run the program in a Python environment.
1. Enter your weight in kilograms when prompted.
2. Enter your height in meters when prompted.
3. The program will calculate the BMI and display it on the screen along with the weight category.

# Code
The program consists of the following components:

`calculate_bmi(weight, height):` This function takes the weight and height as input parameters and calculates the BMI using the provided formula: weight (kg) / [height (m)]^2. It returns the calculated BMI value.

`get_weight_category(bmi):` This function takes the calculated BMI as input and determines the weight category based on the BMI value. It returns a string indicating whether the BMI corresponds to underweight, healthy weight, or overweight.

`main():` This is the main function that executes the program logic. It prompts the user to enter weight and height, calls the calculate_bmi and get_weight_category functions, and displays the calculated BMI value and weight category.

Task 3

Write a python program to simulate an online store. The program should begin by displaying a list of products and their prices. There should be a minimum of 4 products offered. The program should ask the user to choose a product and then ask the user to enter the quantity they require of that product. The program should then allow the user to keep choosing more products and quantities until they enter something to indicate they want to end the program (e.g. a given number or ‘q’ or ‘exit’). The program should then tell the user the total amount for the products they have selected.
"""

"""
Write a python program to simulate an online store. The program should begin by displaying
a list of products and their prices. There should be a minimum of 4 products offered. The
program should ask the user to choose a product and then ask the user to enter the quantity
they require of that product. The program should then allow the user to keep choosing more
products and quantities until they enter something to indicate they want to end the program
(e.g. a given number or 'q' or 'exit'). The program should then tell the user the total
amount for the products they have selected.
"""
!pip install pyfiglet
!pip install inquirer
!pip install tabulate
import pyfiglet
from tabulate import tabulate

# Table of Products
result = pyfiglet.figlet_format("Yusuf", font="5lineoblique")
print("\t**********************************************")
print("\t***        Welcome Task 8 Python Shop      ***")
print(f"{result}")
print("\t**********************************************")
print("𝖂𝖊𝖑𝖈𝖔𝖒𝖊")
product_line = [
    [1, 'Iphone 12', f'£{650}', '⭐⭐⭐⭐'],
    [2, 'Iphone 14', f'£{799}', '⭐⭐⭐'],
    [3, 'Iphone SE', f'£{150}', '⭐⭐⭐⭐⭐'],
    [4, 'Samsung S21', f'£{544}', '⭐⭐']
]

print("Welcome to the online Smart Phone store!\nThese are the smart phones we offer:\n")
print(tabulate(product_line, headers=['#', 'Name', '£ Price', 'Awards'], tablefmt='fancy_grid'))

buy_another_flag = True
total_cost = 0

while buy_another_flag:
    product_choice = input("What would you like to buy (Enter product number or 'q' to quit): ")
    if product_choice == 'q':
        break

    product_index = int(product_choice) - 1

    if 0 <= product_index < len(product_line):
        quantity = int(input("Enter the quantity: "))
        price = float(product_line[product_index][2].strip('£'))
        subtotal = price * quantity
        total_cost += subtotal

        print(f"The price is: £{subtotal:.2f}")
    else:
        print("Invalid product number.")

    buy_another_choice = input("Would you like to buy another item? (y/n): ")
    if buy_another_choice.lower() != 'y':
        buy_another_flag = False

print(f"The total price of your basket is: £{total_cost:.2f}")

"""#Documentation: Product Cart Management System
This documentation provides an overview and usage guide for the Python code snippet that implements a simple product cart management system. The system allows users to view available products, add items to their cart, and calculate the total cost of the selected products.

##Functions
`display_products(products)`:
This function takes a dictionary of products as input and displays the available products and their corresponding prices.

###Parameters
* **'products'** (dictionary): A dictionary where the keys represent product
names, and the values represent their prices. <br>
####Example:
```
# python
products = {
    "Product 1": 10,
    "Product 2": 20,
    "Product 3": 15,
    "Product 4": 25
}
display_products(products)
```
####Output
```
# bash
Available Products:
Product 1 - $10
Product 2 - $20
Product 3 - $15
Product 4 - $25
```
`calculate_total(products, cart)`:
This function calculates the total cost of the products in the cart based on the provided products and quantities.

###Parameters
* **'products'** (dictionary): A dictionary where the keys represent product names, and the values represent their prices.
* **'cart'** (dictionary): A dictionary where the keys represent product names, and the values represent the quantities of each product in the cart.

###Returns
* **'total'** (float): The total cost of the products in the cart.
###Example
```
# python
products = {
    "Product 1": 10,
    "Product 2": 20,
    "Product 3": 15,
    "Product 4": 25
}
cart = {
    "Product 1": 2,
    "Product 3": 1
}
total = calculate_total(products, cart)
print(f"Total amount for the selected products: ${total}")
```
###Output
```
# bash
Total amount for the selected products: $35.0
```

### 'main()'
The main function of the program that orchestrates the product cart management system. It initializes the products and cart dictionaries, displays the available products, prompts the user for product choices and quantities, and calculates the total cost.

####Example
```
# python
if __name__ == '__main__':
    main()
```

##Usage
1. Define the products and their prices in the products dictionary.
2. Call the display_products(products) function to show the available products and their prices.
3. Enter the product you want to purchase when prompted, or enter 'q', 'quit', or 'exit' to exit the program.
4. If a valid product choice is entered, provide the quantity of the product.
5. The program will continue prompting for product choices until the user decides to quit.
6. After exiting the product selection loop, the program will calculate and display the total cost of the selected products.

####Example Output
```
Available Products:
Product 1 - $10
Product 2 - $20
Product 3 - $15
Product 4 - $25

Enter the product you want to purchase (or 'q' to quit): Product 1
Enter the quantity: 2
Enter the product you want to purchase (or 'q' to quit): Product 3
Enter the quantity: 1
Enter the product you want to purchase (or 'q' to quit): q

Total amount for the selected products: $35.0
```
This concludes the documentation for the provided Python code implementing a product cart management system.

**Task** 4
"""

from collections import Counter

def tally_votes():
    # Ask for votes until the user decides to finish
    votes = iter(lambda: input("Enter a vote (or -1 to finish): "), "-1")
    votes_count = Counter(votes)

    # Check if any votes were cast
    if len(votes_count) == 0:
        print("No votes were cast.")
    else:
        # Find the maximum number of votes
        max_votes = max(votes_count.values())
        # Find the candidates with the maximum votes (potential winners)
        winners = [candidate for candidate, vote_count in votes_count.items() if vote_count == max_votes]

        # Display the vote tally for all candidates
        print("Vote tally:")
        for candidate, vote_count in votes_count.items():
            print(f"{candidate}: {vote_count} votes")

        # Check if there is a single winner or a tie
        if len(winners) == 1:
            # Display the winner's name and vote count
            print(f"The winner is {winners[0]} with {max_votes} votes.")
        else:
            # Display the tied winners' names and vote count
            print("It's a tie! The winners are:")
            for winner in winners:
                print(f"{winner} with {max_votes} votes.")

tally_votes()

"""#Function Documentation: tally_write_in_election()
The `tally_write_in_election()` function is designed to tally votes in a write-in election. It prompts the user to enter votes until they indicate that they have finished by entering "-1". The function keeps track of the number of votes received for each candidate and determines the winner(s) based on the maximum number of votes.

##Parameters:
This function does not accept any parameters.

##Returns:
This function does not return any value. It displays the vote tally and winner(s) on the console.

##Usage:
To use the tally_write_in_election() function, simply call it in your Python program or script:

```
#python
tally_write_in_election()
```
###Example:
```
#python
# Example usage of tally_write_in_election() function
tally_write_in_election()
```
###Output:
```
Enter a vote (or -1 to finish): John Doe
Enter a vote (or -1 to finish): Jane Smith
Enter a vote (or -1 to finish): John Doe
Enter a vote (or -1 to finish): Jane Smith
Enter a vote (or -1 to finish): John Doe
Enter a vote (or -1 to finish): -1

Vote tally:
John Doe: 3 votes
Jane Smith: 2 votes

The winner is John Doe with 3 votes.
```
##Detailed Explanation:
1. The function initializes two empty lists, ***'names'*** and ***'count'***, to store the candidate names and the corresponding vote counts, respectively.

2. A while loop is used to continuously prompt the user for votes until they enter "-1" or leave the input empty. This loop breaks when the user indicates the end of voting.

3. Inside the loop, the function checks if the entered vote is already in the ***'names'*** list. If so, it finds the index of the candidate in the list and increments the corresponding vote count in the ***'count'*** list.

4. If the entered vote is not in the ***'names'*** list, it adds the candidate name to the ***'names'*** list and initializes their vote count to 1 in the ***'count'*** list.

5. After the voting process, the function checks if any votes were cast by verifying the length of the ***'names'*** list. If the list is empty, it displays a message indicating that no votes were cast.

6. If votes were cast, the function determines the maximum number of votes received using the ***'max()'*** function on the ***'count'*** list. It then identifies the ***'winner(s)'*** by creating a list, winners, containing the names of candidates whose vote count matches the maximum votes.

7. The function proceeds to display the vote tally by iterating over the **'names'*** and ***'count'*** lists simultaneously using the ***'zip()'*** function. It prints each candidate's name and their corresponding vote count.

8. Finally, the function checks the length of the ***'winners'*** list. If there is only one winner, it displays a message announcing the winner's name and the number of votes they received. If there is a tie between multiple winners, it prints a message indicating a tie and lists the winners' names along with the maximum vote count.

Task 5

Design a class named Account that contains:

* A private int data field named id for the account (default 0).
* A private double data field named balance for the account (default 0).
* A private double data field named annualInterestRate that stores the current interest rate (default 0). Assume all accounts have the same interest rate.
* A private Date data field named dateCreated that stores the date when the account was created.
* A no-argument constructor that creates a default account.
* A constructor that creates an account with the specified id and initial balance.
* The accessor and mutator methods for id, balance, and annualInterestRate.
* The accessor method for dateCreated.
* A method named getMonthlyInterestRate() that returns the monthly interest rate.
* A method named withdraw that withdraws a specified amount from the account.
* A method named deposit that deposits a specified amount to the account.
* Draw the UML diagram for the class.
* Implement the class.

Write a python code that creates an Account object with an account ID of 1122, a balance of $20,000, and an annual interest rate of 4.5%. Use the withdraw method to withdraw $2,500, use the deposit method to deposit $3,000, and print the balance, the monthly interest, and the date when this account was created.

# Account Class Documentation
## Introduction

The Account class represents a bank account and provides methods to perform various operations such as withdrawals, deposits, and accessing account information. This class follows the principles of Object-Oriented Programming (OOP) and encapsulates the account data and operations within its own scope.

###Usage
To use the Account class, you need to import the datetime module and create an instance of the Account class. Then, you can call the methods on the instance to perform desired operations on the account.

```
#python
import datetime

# Create an instance of the Account class
account = Account(1122, 20000)

# Perform operations on the account
account.withdraw(2500)
account.deposit(3000)

# Access account information
print("Account Balance:", account.get_balance())
print("Monthly Interest Rate:", account.get_monthly_interest_rate())
print("Date Created:", account.get_date_created())
```
### ***'Class Account'***
####Constructor
The Account class has a constructor that initializes the account object with the given id and balance values. If no values are provided, the default values are set to 0. Additionally, the __annualInterestRate is set to 0, and the __dateCreated attribute is set to the current date and time using the datetime.datetime.now() method.

```
# python
def __init__(self, id=0, balance=0):
    '''
    Initializes a new instance of the Account class.

    Parameters:
        id (int): The account ID (default: 0).
        balance (float): The initial account balance (default: 0).
    '''
  ```
####Getters and Setters
The Account class provides getter and setter methods for accessing and modifying the private attributes of the account object.

`get_id()`
```
# python
def get_id(self):
    '''
    Retrieves the account ID.

    Returns:
        int: The account ID.
    '''
  ```
`set_id(id)`
```
#python
def set_id(self, id):
    '''
    Sets the account ID.

    Parameters:
        id (int): The new account ID.
    '''
```
`get_balance()`
```
# python
def get_balance(self):
    '''
    Retrieves the account balance.

    Returns:
        float: The account balance.
    '''
```
`set_balance(balance)`
```
#python
def set_balance(self, balance):
    '''
    Sets the account balance.

    Parameters:
        balance (float): The new account balance.
    '''
```
`get_annual_interest_rate()`
```
# python
def get_annual_interest_rate(self):
    '''
    Retrieves the annual interest rate.

    Returns:
        float: The annual interest rate.
    '''
```
`set_annual_interest_rate(annualInterestRate)`
```
# python
def set_annual_interest_rate(self, annualInterestRate):
    '''
    Sets the annual interest rate.

    Parameters:
        annualInterestRate (float): The new annual interest rate.
    '''
```
`get_date_created()`
```
#python
def get_date_created(self):
    '''
    Retrieves the date and time the account was created.

    Returns:
        datetime.datetime: The date and time the account was created.
    '''
```
#####Other Methods
`get_monthly_interest_rate()`
```
#python
def get_monthly_interest_rate(self):
    '''
    Calculates and retrieves the monthly interest rate.

    Returns:
        float: The monthly interest rate.
    '''
```
`withdraw(amount)`
```
#python
def withdraw(self, amount):
    '''
    Withdraws the specified amount from the account.

    If the account balance is less than the withdrawal amount, an "Insufficient funds." message is printed.

    Parameters:
        amount (float): The amount to be withdrawn.
    '''
```
`deposit(amount)`
```
#python

def deposit(self, amount):
    '''
    Deposits the specified amount into the account.

    Parameters:
        amount (float): The amount to be deposited.
    '''
```

The Account class provides a simple implementation of a bank account using Object-Oriented Programming principles. It encapsulates the account data and operations, allowing for better organization and reusability of code. By using this class, you can easily create and manage bank accounts, perform withdrawals and deposits, and access relevant account information.

#Numpy

It is a Python library that provides a **multidimensional array object, including mathematical, logical, matrix manipulation, sorting, I/O, discrete Fourier transforms, basic linear algebra, basic statistical operations, random simulation and much more.**
"""

import datetime

class Account:
    def __init__(self, name, id, balance, annualInterestRate):
        self.name = name
        self.id = id
        self.balance = balance
        self.annualInterestRate = annualInterestRate
        self.dateCreated = datetime.datetime.today()

    def accountInfo(self):
        print("Name: ", self.name)
        print("ID: ", self.id)
        print("Balance: ", self.balance)
        print("Interest rate: ", self.annualInterestRate / 12)
        print("Created on: ", self.dateCreated)

    def withdraw(self, amount):
        if (self.balance - amount < 0):
            print("Your balance is not good enough...")
        else:
            self.balance -= amount
            print('New balance: ', self.balance)

    def deposit(self, amount):
        self.balance += amount
        print("New balance: ", self.balance)

    def getAnnualInterestRate(self):
        return self.annualInterestRate

    def setAnnualInterestRate(self, annualInterestRate):
        self.annualInterestRate = annualInterestRate


account = Account("Yusuf Enes Aras", 1120, 20000, 0.45)

account.deposit(3000)
account.accountInfo()
print('\n')
account.withdraw(2500)
account.accountInfo()

!pip install numpy

import numpy as np

arr = np.array([[1,2,3],[4,5,6],[7,8,9]], '\n')
print('Shape:','\n',arr.shape,'\n')
print('Array:','\n',arr,'\n')

zeros = np.zeros((2,4))
ones = np.ones((2,4))
iden = np.identity(4)

print('Zeros','\n',zeros,'\n')
print('ones','\n', ones,'\n')
print('Identity','\n',iden,'\n')

"""#Pandas
It’s open source library for python programming languge for **data manipulation and analysis. In particular, it offers data structures and operations for manipulating numerical tables and time series.**
"""

!pip install pandas

import pandas as pd

d = [{'city':'delhi','pop':'1232'},
     {'city':'mumbai', 'pop':'1809'},
     {'city':'chennai','pop':'1495'},
     {'city':'kolkata','pop':'1682'}]

pd.DataFrame(d)

"""#Theano
Theano is a numerical computation library for Python. In Theano, computations are expressed using a NumPy-esque syntax and compiled to run efficiently on either CPU or GPU architectures.
"""

!pip install numpy
!pip uninstall theano
!pip install theano
!pip install blas
!export LDFLAGS="-L/usr/local/lib"


import numpy
import theano.tensor as T
from theano import function

#0-dimensional arrays (scalar)
x = T.dscalar('x')
y = T.dscalar('y')
z = x + y
f = function([x, y], z)
scalar = f(10,3)
print(scalar)

#2D arrays(matrix)
w = T.dmatrix('w')
p = T.dmatrix('p')
s = w + p
fun = function([w, p], s)
fun([[1,2],[3,4]],[[10,20],[30,40]])

"""#Tensorflow
TensorFlow is a **Machine Learning framework** created by Google for creating Deep Learning models. Deep Learning is a category of machine learning models that use multi-layer neural networks.


"""



!pip install tensorflow

import tensorflow.compat.v1 as tf
tf.disable_v2_behavior()

hello = tf.constant('Hello, TensorFlow!')
sess = tf.Session()

print(sess.run(hello).decode('utf-8'))

!pip install numpy
!pip install matplotlib
!pip install imageio

import numpy as np
import matplotlib.pyplot as plt
import imageio

# Simülasyon için parametreler
num_frames = 100 # kare sayısı
circle_radius = 0.005  # Uçağı noktasal göster
x_min, x_max = 0, 1
y_min, y_max = 0, 1
circle_y = (y_max - y_min) / 2
plane_speed = (x_max - x_min - 2 * circle_radius) / (num_frames - 1)
wave_increment = plane_speed / 1.1  # Mach hızını değiştirmek için 1.1 değerini değiştir. Şu anda 1.1 Mach.
grid_size = 300

x = np.linspace(x_min, x_max, grid_size)
y = np.linspace(y_min, y_max, grid_size)
X, Y = np.meshgrid(x, y)

# Bu kısım dalgaları takip ediyor
waves = []

def gaussian2D(x, y, x0, y0, sx, sy, amplitude):
    return amplitude * np.exp(-((x - x0)**2 / (2 * sx**2) + (y - y0)**2 / (2 * sy**2)))

def update_circle_pos(frame):
    ax.clear()
    ax.set_xlim(x_min, x_max)
    ax.set_ylim(y_min, y_max)
    ax.set_aspect('equal', 'box')
    ax.axis('off')

    circle_x = x_min + frame * plane_speed

    # Yeni dalga yay
    waves.append([circle_x, circle_y, 0, 1.0])

    # Dalgalar için sıcaklık haritası
    heatmap = np.zeros_like(X)
    new_waves = []
    for wave in waves:
        wave[2] += wave_increment
        wave[3] *= 0.95
        heatmap += gaussian2D(X, Y, wave[0], wave[1], wave[2], wave[2], wave[3])
        if wave[2] + wave_increment < x_max - wave[0]:
            new_waves.append(wave)
    waves[:] = new_waves

    ax.imshow(heatmap, extent=(x_min, x_max, y_min, y_max), origin='lower', cmap='hot', aspect='auto', alpha=0.6)

    # Çiz
    plane_circle = plt.Circle((circle_x, circle_y), circle_radius, color='blue')
    ax.add_patch(plane_circle)
    return ax,

fig, ax = plt.subplots(figsize=(6, 6))

frames = []
for frame in range(num_frames):
    update_circle_pos(frame)
    fig.canvas.draw()  # Figürü update et
    image = np.frombuffer(fig.canvas.tostring_rgb(), dtype='uint8')
    image = image.reshape(fig.canvas.get_width_height()[::-1] + (3,))
    frames.append(image)

plt.close(fig)

# GIF olarak kaydet
imageio.mimsave('ucak_simulasyon.gif', frames, duration=100)

!pip install json
!pip install reportlab
!pip install fpdf

import json
from reportlab.lib.pagesizes import letter
from reportlab.pdfgen import canvas
from fpdf import FPDF

# Function to load or create a JSON resume file
def load_or_create_resume(filename):
    try:
        with open(filename, 'r') as file:
            resume_data = json.load(file)
    except FileNotFoundError:
        resume_data = {
            "PersonalDetails": {
                "Name": "",
                "Mobile": "",
                "Email": "",
                "PostCode": ""
            },
            "PersonalProfile": "",
            "Skillset": "",
            "EmploymentHistory": [],
            "EducationAndTraining": [],
            "HobbiesAndInterests": "",
            "References": "Available on request"
        }
    return resume_data

# Function to generate a PDF resume
def generate_pdf_resume(data, pdf_filename):
    pdf = FPDF()
    pdf.add_page()
    pdf.set_font("Arial", size=12)

    # Add sections to the PDF
    for section, content in data.items():
        pdf.add_page()
        pdf.cell(200, 10, txt=section, ln=True, align='C')

        # Check if the content is a dictionary
        if isinstance(content, dict):
            for key, value in content.items():
                pdf.multi_cell(0, 10, f"{key}: {value}", align='L')
        else:
            pdf.multi_cell(0, 10, txt=content, align='L')

    # Save the PDF to the specified filename
    pdf.output(pdf_filename)
d

# Main function to run the resume creator
def main():
    json_filename = 'resume_data.json'
    pdf_filename = 'resume.pdf'

    resume_data = load_or_create_resume(json_filename)

    # Collect user input for each section
    for section, content in resume_data.items():
        if isinstance(content, dict):
            for field in content:
                resume_data[section][field] = input(f"Enter {field}: ")
        else:
            resume_data[section] = input(f"Enter {section}: ")

    # Save the updated data to JSON
    save_resume_data(resume_data, json_filename)

    # Generate the PDF resume
    generate_pdf_resume(resume_data, pdf_filename)

if __name__ == "__main__":
    main()

!pip install PyGithub
!pip install schedule


import os
import random
import string
import schedule
import time
from github import Github

# GitHub credentials and repository information
GITHUB_TOKEN = 'your_github_token_here'
REPO_OWNER = 'your_username_or_organization'
REPO_NAME = 'your_repository_name'
FILE_PATH = 'random_text.txt'

# Function to generate random content
def generate_random_content():
    content = ''.join(random.choices(string.ascii_letters + string.digits, k=100))
    return content

# Function to push random content to GitHub
def push_to_github():
    content = generate_random_content()

    # Authenticate to GitHub using the token
    github = Github(GITHUB_TOKEN)
    repo = github.get_user(REPO_OWNER).get_repo(REPO_NAME)

    # Create a new commit with the random content
    repo.create_file(FILE_PATH, "Update random content", content, branch="main")

    print(f"Uploaded random content to GitHub at {time.strftime('%Y-%m-%d %H:%M:%S')}")

# Schedule the bot to run three times a day
schedule.every(8).hours.do(push_to_github)

# Run the scheduler
while True:
    schedule.run_pending()
    time.sleep(1)

! pip install hashlib
import hashlib

def hash_text(text):
    # Create a new SHA-256 hash object
    sha256 = hashlib.sha256()

    # Update the hash object with the input text
    sha256.update(text.encode('utf-8'))

    # Get the hexadecimal representation of the hash
    hashed_text = sha256.hexdigest()

    return hashed_text

if __name__ == "__main__":
    while True:
        # Take user input
        user_input = input("Enter text to hash (or type 'exit' to quit): ")

        # Check if the user wants to exit
        if user_input.lower() == "exit":
            break

        # Calculate and print the hash
        hashed_text = hash_text(user_input)
        print("Hashed text:", hashed_text)

name = input("Enter your name:")
age = 18

print(name,' is',age, ' years old')

a = 13
b = 2.5
z = int(a)+float(b)
print(z)

a = 7
b = 2

a += 2
print (a)

a = 5
b = 2
# equal to operator
print('a==b', a==b)

print(8//3*3/2+10%2**2)
print(8//3*3/2+10%4) # Exponentiation applied (2 above)
print(2*3/2+10%4) # (3 above)
print(2*3/2+10%4) # (3 above)
print(6/2+10%4) # (3 above)
print(3+10%4) # (3 above)
print(3+2) # (4 above)

a=8.0
b=3.0
c=4.0
d=2.0
e=1.0
f=a-b+c/d*e
print(float(f))
f=(a-b)+((c/b)*e)
print(f)
f= (a-(b+c))/(d*e)
print(f)

# Function to calculate the area of a rectangle
def calculate_area(length, width):
    area = length * width
    return area

# Function to calculate the perimeter of a rectangle
def calculate_perimeter(length, width):
    perimeter = 2 * (length + width)
    return perimeter

# Input the length and width of the rectangle
length = float(input("Enter the length of the rectangle: "))
width = float(input("Enter the width of the rectangle: "))

# Calculate the area and perimeter
area = calculate_area(length, width)
perimeter = calculate_perimeter(length, width)

# Display the results
print(f"Area of the rectangle: {area}")
print(f"Perimeter of the rectangle: {perimeter}")

# Input for the dimensions of the first rectangle
length1 = float(input("Enter the length of the first rectangle: "))
width1 = float(input("Enter the width of the first rectangle: "))

# Input for the dimensions of the second rectangle
length2 = float(input("Enter the length of the second rectangle: "))
width2 = float(input("Enter the width of the second rectangle: "))

# Calculate the areas of the two rectangles
area1 = length1 * width1
area2 = length2 * width2

# Compare the areas and print the result
if area1 > area2:
  print("The first rectangle has a greater area.")
elif area2 > area1:
  print("The second rectangle has a greater area.")
else:
  print("Both rectangles have the same area.")

num = int(input("Enter number: "))
if num>10:
  print("Number greater than 10")
else:
  print("not")

def calculate_letter_grade(score):
    if score >= 90:
        return 'A'
    elif score >= 80:
        return 'B'
    elif score >= 70:
        return 'C'
    elif score >= 60:
        return 'D'
    else:
        return 'F'


score = float(input("Enter your numerical grade: "))

if 60 <= score <= 90:
  letter_grade = calculate_letter_grade(score)
  print(f"Your letter grade is: {letter_grade}")
else:
  print("Invalid input. Please enter a numerical grade between 60 and 90.")

i = 0
while i < 5:
  print(i)
  i+=1

num=int(input("Please enter a number: "))
f=1
x=2
while x<=num:
  f*=x
  x+=1
print(num!=f)

i=1
while i < 6:
  print(i)
  i+=1
  if i ==3:
    break
print(i)

i=1
while i < 6:
  i+=1
  if i 3:
    continue
print(i)

sum = 0
while(1):
  num= float(input("Enter a number (0 to terminal): "))
  if num == 0:
    break

i=1
while i<6:
  print(i)
  i += 1

while True:
    age = int(input("Enter a person's age (or -1 to exit): "))

    if age == -1-:
        print("Exiting the program.")
        break

    if age <= 1:
        print("The person is an infant.")
    elif age < 13:
        print("The person is a child.")
    elif age < 20:
        print("The person is a teenager.")
    else:
        print("The person is an adult.")

while True:
    total_sales = float(input("Enter the projected amount of total sales (or -1 to exit): "))

    if total_sales == -1:
        print("Exiting the program.")
        break

    profit = 0.23 * total_sales
    print("The profit from projected sales is:", profit)

while True:
    # Get the number of hours worked
    hours_worked = float(input("Enter the number of hours worked (or -1 to exit): "))

    if hours_worked == -1:
        print("Exiting the program.")
        break

    # Get the hourly pay rate
    hourly_pay_rate = float(input("Enter the hourly pay rate: "))

    if hours_worked > 40:
        # Calculate regular pay for the first 40 hours
        regular_pay = 40 * hourly_pay_rate

        # Calculate overtime pay for hours over 40
        overtime_hours = hours_worked - 40
        overtime_pay = overtime_hours * (1.5 * hourly_pay_rate)

        # Calculate and display the gross pay with overtime
        gross_pay = regular_pay + overtime_pay
        print("Gross pay with overtime: $", gross_pay)
    else:
        # Calculate and display the gross pay as usual
        gross_pay = hours_worked * hourly_pay_rate
        print("Gross pay: $", gross_pay)

    continue

# Define the number of rows for the pattern
num_rows = 5

# Outer loop for each row
for i in range(num_rows):
    # Inner loop for printing asterisks in each row
    for j in range(i + 1):
        print("*", end=" ")  # Print an asterisk followed by a space
    print()  # Move to the next line after each row of asterisks

def sum_of_numbers():
    total = 0
    while True:
        number = int(input("Enter a positive number (or a negative number to stop): "))
        if number < 0:
            break
        total += number
    print("The sum of the numbers is:", total)

sum_of_numbers()

def sum_of_number():
  total = 0
  while True:
    number = int(input("Enter a position number "))

def sum_of_numbers(): total = 0; while True: number = int(input("Enter a positive number (or a negative number to stop): ")); if number < 0: break; total += number; print("The sum of the numbers is:", total)

def and convert_ maximum temperaturescel,si orus displaying the_ datato in_ afahrenheit different format(celsi, such as a bar chartus):
    return ( or a scatter plot.9.0 / 5.0) * celsius + 32

# Display the table
for celsius in range(0, 21):
    fahrenheit = convert_celsius_to_fahrenheit(celsius)
    print(f"{celsius}°C = {fahrenheit:.2f}°F")

print("Celsius  Fahrenheit")
print("--------------------")

for celsius in range(21):
    fahrenheit = (9/5) * celsius + 32
    print(f"{celsius:7}  {fahrenheit:10.2f}")

import plotly.graph_objects as go

print("Celsius  Fahrenheit")
print("--------------------")

celsiusdic = {}  # Use a dictionary instead of a list to store the data

for celsius in range(21):
    fahrenheit = (9/5) * celsius + 32
    print(f"{celsius:7}  {fahrenheit:10.2f}")
    celsiusdic[f"{celsius:7}"] = f"{fahrenheit:10.2f}"

# Convert the dictionary to lists for use in Plotly
celsius_values = list(celsiusdic.keys())
fahrenheit_values = list(celsiusdic.values())

fig = go.Figure(data=[go.Table(header=dict(values=['Celsius', 'Fahrenheit']),
                 cells=dict(values=[celsius_values, fahrenheit_values]))
                     ])
fig.show()

# Initialize an empty dictionary
my_dict = {}

# Create a while loop to add data to the dictionary
while True:
    key = input("Enter a key (or 'q' to quit): ")

    # Check if the user wants to quit
    if key == 'q':
        break

    value = input("Enter a value: ")

    # Add the key-value pair to the dictionary
    my_dict[key] = value

# Print the resulting dictionary
print("Dictionary contents:")
for key, value in my_dict.items():
    print(f"{key}: {value}")

def my_funtion(fname, lname):
  print(f"Welcome to FBI{fname}{lname}")

fi = input("Your First Name: ")
li = input("Your Sourname")

my_funtion(fi, li)

def my_funtion(country = "Norway"):
  print(f"I am from{country}")

my_funtion("Turkey")
my_funtion("Kurdey")
my_funtion("Engley")

def my_funtion(country=key):
  print(f"I am from{country}")

country = {}
# Create a while loop to add data to the dictionary
while True:
    key = input("Enter a Country (or 'q' to quit): ")

    # Check if the user wants to quit
    if key == 'q':
        break

    value = input(f"Enter a capital sty of {key}: ")

    # Add the key-value pair to the dictionary
    country[key] = value

# Print the resulting dictionary
print("Those country:")
for key, value in country.items():
    my_funtion(country)



def add(num1: int, num2: int):
  num3 = num1+num2
  return num3

#num1, num2 = 5,15

num1 = int(input("enter num1: "))
num2 = int(input("enter num2: "))
ans = add(num1, num2)
add(num1, num2)

i,J = 0
while True:
  choice = input("Do you want to add more numbers? (yes/no): ").lower()
  if choice != 'yes':
    break
  J+=1

  while i <= len(J)
  num+{i} = int(input("Enter num1: "))
  def add(num{i}, num{i}):
    num3 = num1 + num2
    return num3

  ans = add(num1, num2)
  print(f"Result: {ans}")

def add(num1: int, num2: int):
  num3=num1+num2
  return num3

num1, num2 = 5, 15
ans = add(num1, num2)
print(f"{ans}")

def evenOdd(x):
  if(x%2==0):
    print("even")
  else:
    print("odd")

x = int(input("enter a number"))
evenOdd(x)

'''operations = {'+': lambda x, y: x + y, '-': lambda x, y: x - y, '*': lambda x, y: x * y, '/': lambda x, y: x / y}

while True:
    operation = input("Enter an operation (+, -, *, /): ")
    if operation not in operations:
        print("Invalid operation. Please enter +, -, *, or /.")
        continue

    num1 = float(input("Enter the first number: "))
    num2 = float(input("Enter the second number: "))

    result = operations[operation](num1, num2)
    print(f"Result: {result}")

    choice = input("Do you want to perform another operation? (yes/no): ").lower()
    if choice != 'yes':
        break
'''

total = 0

while True:
    num = float(input("Enter a number to add (or 'q' to quit): "))
    if num == 'q':
        break
    total += num

print(f"Total sum: {total}")